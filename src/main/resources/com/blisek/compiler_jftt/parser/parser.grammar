%package "com.blisek.compiler_jftt.parser";
%import "com.blisek.compiler_jftt.ast.*";
%import "com.blisek.compiler_jftt.structs.*";
%import "java.math.BigInteger";
%import "java.util.ArrayList";
%import "java.util.List";
%class "ExpressionParser";

%terminals NUMBER, ZERO, ONE, SEMIC, VAR, BEGIN, EOF, PIDENTIFIER;
%terminals END, MULT, DIV, PLUS, MINUS, MOD;
%terminals IF, THEN, ELSE, ENDIF, WHILE, DO, ENDWHILE;
%terminals FOR, FROM, TO, DOWNTO, ENDFOR, READ, WRITE, SKIP;
%terminals LBRACKET, RBRACKET, ASSIGN;
%terminals EQ, NEQ, LT, GT, LE, GE;

%left  MULT, DIV, MOD;
%left  PLUS, MINUS;

%typeof NUMBER = "BigInteger";
%typeof PIDENTIFIER = "String";
%typeof program, commands, command, expression = "Expression";
%typeof condition = "ConditionExpression";
%typeof addition = "Expression";
%typeof subtraction = "Expression";
%typeof multiplication = "Expression";
%typeof division = "Expression";
%typeof modulo = "Expression";
%typeof value, identifier = "ValueExpression";
%typeof vdeclarations = "VDeclarationsExpression";

%goal program;


program       
					= VAR vdeclarations.v BEGIN commands.c END	{: return new ProgramExpression(c, v); :} 
					;
					
vdeclarations		= vdeclarations.v PIDENTIFIER.p {: VDeclaration vd = VDeclaration.of(p); 
						return VDeclarationHelper.extendOrMakeListOfVDec(vd, v); :}
					| vdeclarations.v PIDENTIFIER.p LBRACKET NUMBER.n RBRACKET {: 
						VDeclaration vd = VDeclaration.arrayOf(p, n); 
						return VDeclarationHelper.extendOrMakeListOfVDec(vd, v); :}
					| {: return new VDeclarationsExpression(); :}
					;

commands    
					= commands.s command.c	{: return new Expression(s, c); :}
             		| command.c				{: return c; :} 
             		;

command     
					= identifier.i ASSIGN expression.e SEMIC {: return new AssignmentExpression(i, e); :}
					| IF condition.c THEN commands.cs1 ELSE commands.cs2 ENDIF {: return new IfExpression(c, cs1, cs2); :}
					| WHILE condition.c DO commands.cs ENDWHILE {: return new WhileExpression(c, cs); :}
					| FOR PIDENTIFIER.p FROM value.v1 TO value.v2 DO commands.c ENDFOR {: return new ForFromToExpression(p, v1, v2, c); :}
					| FOR PIDENTIFIER.p FROM value.v1 DOWNTO value.v2 DO commands.c ENDFOR {: return new ForFromDownToExpression(p, v1, v2, c); :}
             		| READ identifier.i SEMIC {: return new ReadExpression(i); :}
             		| WRITE value.v SEMIC {: return new WriteExpression(v); :}
             		| SKIP SEMIC {: return new SkipExpression(); :}
             		;

expression  		
					= value
             		| addition
             		| subtraction
             		| multiplication
             		| division
             		| modulo
             		;
             		
condition			= value.v1 EQ value.v2			{: return new EqualsConditionExpression(v1, v2); :}
					| value.v1 NEQ value.v2			{: return new NotEqualsConditionExpression(v1, v2); :}
					| value.v1 LT value.v2			{: return new LessThanConditionExpression(v1, v2); :}
					| value.v1 GT value.v2			{: return new GreaterThanConditionExpression(v1, v2); :}
					| value.v1 LE value.v2			{: return new LessEqualsConditionExpression(v1, v2); :}
					| value.v1 GE value.v2			{: return new GreaterEqualsConditionExpression(v1, v2); :}
					;
             		
addition
					= value.v PLUS ZERO			{: return v; :}
					| ZERO PLUS value.v			{: return v; :}
					| value.v1 PLUS value.v2	{: return new AdditionExpression(v1, v2); :}
					| value.v1 PLUS ONE			{: return new AdditionExpression(new NumberValueExpression(BigInteger.ONE), v1); :}
					| ONE PLUS value.v2			{: return new AdditionExpression(new NumberValueExpression(BigInteger.ONE), v2); :}
					;

subtraction
					= value.v MINUS ZERO		{: return v; :}
					| ZERO MINUS value			{: return new NumberValueExpression(BigInteger.ZERO); :}
					| value.v1 MINUS value.v2	{: return new SubtractionExpression(v1, v2); :}
					| ONE MINUS value.v			{: return new SubtractionExpression(new NumberValueExpression(BigInteger.ONE), v); :}
					| value.v MINUS ONE			{: return new SubtractionExpression(v, new NumberValueExpression(BigInteger.ONE)); :}
					;

multiplication
					= value MULT ZERO			{: return new NumberValueExpression(BigInteger.ZERO); :}
					| ZERO MULT value			{: return new NumberValueExpression(BigInteger.ZERO); :}
					| value.v MULT ONE			{: return v; :}
					| ONE MULT value.v			{: return v; :} 
					| value.v1 MULT value.v2	{: return new MultiplyExpression(v1, v2); :}
					;
					
division
					= value DIV ZERO			{: return new NumberValueExpression(BigInteger.ZERO); :}
					| ZERO DIV value			{: return new NumberValueExpression(BigInteger.ZERO); :}
					| value.v DIV ONE			{: return v; :}
					| value.v1 DIV value.v2		{: return new DivisionExpression(v1, v2); :}
					; 
				
modulo
					= value MOD ZERO			{: return new NumberValueExpression(BigInteger.ZERO); :}
					| value MOD ONE				{: return new NumberValueExpression(BigInteger.ZERO); :} 
					| ZERO MOD value			{: return new NumberValueExpression(BigInteger.ZERO); :}
					| ONE MOD value				{: return new NumberValueExpression(BigInteger.ONE); :}
					| value.v1 MOD value.v2		{: return new ModuloExpression(v1, v2); :}
					;

value       
					= NUMBER.n					{: return new NumberValueExpression(n); :}
					| ZERO						{: return new NumberValueExpression(BigInteger.ZERO); :}
					| ONE						{: return new NumberValueExpression(BigInteger.ONE); :}
             		| identifier
             		;

identifier  
					= PIDENTIFIER.p 									{: return new VariableValueExpression(VariableInfo.of(p)); :}
					| PIDENTIFIER.p LBRACKET NUMBER.n RBRACKET 			{: return new ArrayValueExpression(VariableInfo.of(p), n); :}
					| PIDENTIFIER.p LBRACKET ZERO RBRACKET 				{: return new ArrayValueExpression(VariableInfo.of(p), BigInteger.ZERO); :}
					| PIDENTIFIER.p LBRACKET ONE RBRACKET 				{: return new ArrayValueExpression(VariableInfo.of(p), BigInteger.ONE); :}
					| PIDENTIFIER.p1 LBRACKET PIDENTIFIER.p2 RBRACKET 	{: return new ArrayVariableValueExpression(VariableInfo.of(p1), p2); :} 
             		;

    