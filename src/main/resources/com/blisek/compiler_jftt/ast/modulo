GET 1
GET 2
JZERO 1 EXIT_ZERO
JZERO 2 EXIT_ZERO
DEC 2
JZERO 2 EXIT_ZERO # DZIELENIE PRZEZ 1
INC 2
ZERO 0 # NORMALNIE ZBYTECZNA
INC 0 # ZACHOWANIE DZIELNEJ I DZIELNIKA, r0 = 1
STORE 1
INC 0 # r0 = 2
STORE 2
ZERO 3
INC 1
SUB 1
JZERO 1 EXIT_LESS
JUMP NO_EXIT_LESS_JUMP
EXIT_LESS: DEC 0
LOAD 1
JUMP EXIT
NO_EXIT_LESS_JUMP: DEC 1
JZERO 1 EXIT_ZERO
DEC 0
LOAD 1
JUMP ALIGN_DIVISOR_FIRST
ALIGN_DIVISOR: DEC 0 # r0 = 1
ALIGN_DIVISOR_FIRST: SUB 2
JZERO 2 SHIFT_DIVISOR
JUMP AFTER_SHIFT_DIVISOR
SHIFT_DIVISOR: INC 0 # r0 = 2
LOAD 2
SHL 2
INC 3 # SHIFTS COUNTER
STORE 2
JUMP ALIGN_DIVISOR
AFTER_SHIFT_DIVISOR: INC 0 # r0 = 2
LOAD 2
SHR 2 # PRZESUNIĘCIE Z POWROTEM O JEDNĄ POZYCJĘ BY NIE BYŁO WIĘKSZE
STORE 2
# DEC 3
ALIGN_DIVISOR_END: INC 1 # sprawdzanie czy większe
SUB 1
JZERO 1 SUB_RESULT_ZERO
DEC 1
DEC 0
STORE 1
SHR 2
INC 0
STORE 2
DEC 3
JZERO 3 EXIT
JUMP ALIGN_DIVISOR_END
SUB_RESULT_ZERO: DEC 0
LOAD 1 // ponowne wczytanie
SHR 2
INC 0
STORE 2
DEC 3
JZERO 3 EXIT
JUMP ALIGN_DIVISOR_END
EXIT_ZERO: ZERO 1
EXIT: PUT 1
PUT 3
HALT
