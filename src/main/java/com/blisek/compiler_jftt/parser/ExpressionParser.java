package com.blisek.compiler_jftt.parser;

import com.blisek.compiler_jftt.ast.*;
import com.blisek.compiler_jftt.structs.*;
import java.math.BigInteger;
import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.grammar".
 */
public class ExpressionParser extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short SEMIC = 1;
		static public final short PIDENTIFIER = 2;
		static public final short NUMBER = 3;
		static public final short ZERO = 4;
		static public final short ONE = 5;
		static public final short PLUS = 6;
		static public final short MULT = 7;
		static public final short MOD = 8;
		static public final short READ = 9;
		static public final short WRITE = 10;
		static public final short SKIP = 11;
		static public final short MINUS = 12;
		static public final short DIV = 13;
		static public final short BEGIN = 14;
		static public final short END = 15;
		static public final short ASSIGN = 16;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9ojqzbF4r4O1V0pqx9K4De2fPH5HKLKL92AW8ZYWoQQOAA99lhWWm##kA#uxqlK#F#vx$k" +
		"2kE$7CvSFCfcKc1Yc#SsvSx#RExUtlG1k88afCXMbc85cpCGipEOt5CF7IiHGXXeq8gKHrK" +
		"YZJfb5DvQX7tCm7uiGHuetCHSBDAOILLOBsYteS5cE2fSPrBhCeTvb4wQHM8myklIs4XHfx" +
		"WQPxgf9j5hEisopN6ZPRjbfkSHogMKV4lp0znpcMxxcAxxWCpxbOpxYGpxWNNxb5txc9txa" +
		"2D$m9P$mFj$nEU#XHpFqOZbMADDEZLjzLjy$1qyz5VgcrMxLfTgdO4IvTZ38X7Qpp2gLgjM" +
		"xYg#TZ5jjj5tqpuJD4knzrVXAWkfafFUVdvHc66q10sTq8$b7qIH9wG$wT7LAg#oqvuIqoI" +
		"xPBNk2$Z6wccMlx9DssIy7vA3avP0SbYFIBKDoL8x9SJaX9#MKd9QChB7frybPMI$dPAESb" +
		"yroGNfagroKRN99jijbkI9NROqxv9grhqVMNwnz#A7i2FUhRpZoF19#ZipXX#UBrFAHvww9" +
		"vecCwxKS#rrMMQwsN1iQEsYvmNAJvL1ep9O9tZE0ySlz7uBy5UgxmzkyXKc##DFTjU$ypjz" +
		"gjkYynNGoVV5qQk8ICxvEiLTGHlMesf1i0NKHkGA2KvPsPyP3mrzyagGf");

	private final Action[] actions;

	public ExpressionParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] program = BEGIN commands.c END
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_c = _symbols[offset + 2];
					final Expression c = (Expression) _symbol_c.value;
					 return new ProgramExpression(c);
				}
			},
			new Action() {	// [1] commands = commands.s command.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_s = _symbols[offset + 1];
					final Expression s = (Expression) _symbol_s.value;
					final Symbol _symbol_c = _symbols[offset + 2];
					final Expression c = (Expression) _symbol_c.value;
					 return new Expression(s, c);
				}
			},
			new Action() {	// [2] commands = command.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_c = _symbols[offset + 1];
					final Expression c = (Expression) _symbol_c.value;
					 return c;
				}
			},
			new Action() {	// [3] command = identifier.i ASSIGN expression.e SEMIC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final ValueExpression i = (ValueExpression) _symbol_i.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final Expression e = (Expression) _symbol_e.value;
					 return new AssignmentExpression(i, e);
				}
			},
			new Action() {	// [4] command = READ identifier.i SEMIC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 2];
					final ValueExpression i = (ValueExpression) _symbol_i.value;
					 return new ReadExpression(i);
				}
			},
			new Action() {	// [5] command = WRITE value.v SEMIC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 2];
					final ValueExpression v = (ValueExpression) _symbol_v.value;
					 return new WriteExpression(v);
				}
			},
			new Action() {	// [6] command = SKIP SEMIC
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new SkipExpression();
				}
			},
			Action.RETURN,	// [7] expression = value
			Action.RETURN,	// [8] expression = addition
			Action.RETURN,	// [9] expression = subtraction
			Action.RETURN,	// [10] expression = multiplication
			Action.RETURN,	// [11] expression = division
			Action.RETURN,	// [12] expression = modulo
			new Action() {	// [13] addition = value.v PLUS ZERO
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final ValueExpression v = (ValueExpression) _symbol_v.value;
					 return v;
				}
			},
			new Action() {	// [14] addition = ZERO PLUS value.v
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 3];
					final ValueExpression v = (ValueExpression) _symbol_v.value;
					 return v;
				}
			},
			new Action() {	// [15] addition = value.v1 PLUS value.v2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v1 = _symbols[offset + 1];
					final ValueExpression v1 = (ValueExpression) _symbol_v1.value;
					final Symbol _symbol_v2 = _symbols[offset + 3];
					final ValueExpression v2 = (ValueExpression) _symbol_v2.value;
					 return new AdditionExpression(v1, v2);
				}
			},
			new Action() {	// [16] addition = value.v1 PLUS ONE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v1 = _symbols[offset + 1];
					final ValueExpression v1 = (ValueExpression) _symbol_v1.value;
					 return new AdditionExpression(v1, new NumberValueExpression(BigInteger.ONE));
				}
			},
			new Action() {	// [17] addition = ONE PLUS value.v2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v2 = _symbols[offset + 3];
					final ValueExpression v2 = (ValueExpression) _symbol_v2.value;
					 return new AdditionExpression(new NumberValueExpression(BigInteger.ONE), v2);
				}
			},
			new Action() {	// [18] subtraction = value.v MINUS ZERO
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final ValueExpression v = (ValueExpression) _symbol_v.value;
					 return v;
				}
			},
			new Action() {	// [19] subtraction = ZERO MINUS value
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new NumberValueExpression(BigInteger.ZERO);
				}
			},
			new Action() {	// [20] subtraction = value.v1 MINUS value.v2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v1 = _symbols[offset + 1];
					final ValueExpression v1 = (ValueExpression) _symbol_v1.value;
					final Symbol _symbol_v2 = _symbols[offset + 3];
					final ValueExpression v2 = (ValueExpression) _symbol_v2.value;
					 return new SubtractionExpression(v1, v2);
				}
			},
			new Action() {	// [21] multiplication = value MULT ZERO
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new NumberValueExpression(BigInteger.ZERO);
				}
			},
			new Action() {	// [22] multiplication = ZERO MULT value
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new NumberValueExpression(BigInteger.ZERO);
				}
			},
			new Action() {	// [23] multiplication = value.v MULT ONE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final ValueExpression v = (ValueExpression) _symbol_v.value;
					 return v;
				}
			},
			new Action() {	// [24] multiplication = ONE MULT value.v
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 3];
					final ValueExpression v = (ValueExpression) _symbol_v.value;
					 return v;
				}
			},
			new Action() {	// [25] multiplication = value.v1 MULT value.v2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v1 = _symbols[offset + 1];
					final ValueExpression v1 = (ValueExpression) _symbol_v1.value;
					final Symbol _symbol_v2 = _symbols[offset + 3];
					final ValueExpression v2 = (ValueExpression) _symbol_v2.value;
					 return new MultiplyExpression(v1, v2);
				}
			},
			new Action() {	// [26] division = value DIV ZERO
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new NumberValueExpression(BigInteger.ZERO);
				}
			},
			new Action() {	// [27] division = ZERO DIV value
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new NumberValueExpression(BigInteger.ZERO);
				}
			},
			new Action() {	// [28] division = value.v DIV ONE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final ValueExpression v = (ValueExpression) _symbol_v.value;
					 return v;
				}
			},
			new Action() {	// [29] division = value.v1 DIV value.v2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v1 = _symbols[offset + 1];
					final ValueExpression v1 = (ValueExpression) _symbol_v1.value;
					final Symbol _symbol_v2 = _symbols[offset + 3];
					final ValueExpression v2 = (ValueExpression) _symbol_v2.value;
					 return new DivisionExpression(v1, v2);
				}
			},
			new Action() {	// [30] modulo = value MOD ZERO
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new NumberValueExpression(BigInteger.ZERO);
				}
			},
			new Action() {	// [31] modulo = value.v MOD ONE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final ValueExpression v = (ValueExpression) _symbol_v.value;
					 return v;
				}
			},
			new Action() {	// [32] modulo = ZERO MOD value
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new NumberValueExpression(BigInteger.ZERO);
				}
			},
			new Action() {	// [33] modulo = ONE MOD value
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new NumberValueExpression(BigInteger.ONE);
				}
			},
			new Action() {	// [34] modulo = value.v1 MOD value.v2
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v1 = _symbols[offset + 1];
					final ValueExpression v1 = (ValueExpression) _symbol_v1.value;
					final Symbol _symbol_v2 = _symbols[offset + 3];
					final ValueExpression v2 = (ValueExpression) _symbol_v2.value;
					 return new ModuloExpression(v1, v2);
				}
			},
			new Action() {	// [35] value = NUMBER.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final BigInteger n = (BigInteger) _symbol_n.value;
					 return new NumberValueExpression(n);
				}
			},
			Action.RETURN,	// [36] value = identifier
			new Action() {	// [37] identifier = PIDENTIFIER.p
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_p = _symbols[offset + 1];
					final String p = (String) _symbol_p.value;
					 return new VariableValueExpression(VariableInfo.of(p));
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
